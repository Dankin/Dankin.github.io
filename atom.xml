<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dankin.github.io</id>
    <title>Dankin&apos;s Blog</title>
    <updated>2020-07-14T15:53:00.248Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dankin.github.io"/>
    <link rel="self" href="https://dankin.github.io/atom.xml"/>
    <subtitle>时光泡烂了过往</subtitle>
    <logo>https://dankin.github.io/images/avatar.png</logo>
    <icon>https://dankin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Dankin&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[CTF入门之虚拟机安装配置]]></title>
        <id>https://dankin.github.io/post/ctf-ru-men-zhi-xu-ni-ji-an-zhuang-pei-zhi/</id>
        <link href="https://dankin.github.io/post/ctf-ru-men-zhi-xu-ni-ji-an-zhuang-pei-zhi/">
        </link>
        <updated>2020-07-14T10:37:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2>
<p>因为学习CTF需要使用到多个不同的操作系统，而一台电脑安装多个操作系统时切换极为不便且没有必要，因此选择在一个主系统内安装虚拟机，方便切换，使用和练习。</p>
<h2 id="相关软件和操作系统">相关软件和操作系统</h2>
<p>一共安装了5个操作系统，包括三个Linux系统——<strong>kali</strong>，<strong>ubuntu</strong>和<strong>Metasploitable2</strong>，2个windows系统——<strong>windows server 2003</strong>和<strong>windows7</strong>，使用的虚拟机软件是Vmware15下面大概总结一下安装步骤。</p>
<h2 id="安装步骤">安装步骤</h2>
<ul>
<li>Kali：在该<a href="https://www.kali.org/downloads/">网站</a>直接下载，最下面一排有个<br>
<img src="https://dankin.github.io/post-images/1594740160862.png" alt="" loading="lazy">选择对应的，下载后可以直接双击vmx文件打开,默认用户名和密码均为kali</li>
<li>Ubuntu： 在该<a href="https://ubuntu.com/#download">网站</a>下载桌面版，然后使用Vmware安装，放个<a href="https://zhuanlan.zhihu.com/p/38797088">链接</a>自查</li>
<li>Metasploitable2： 用来做靶机，和Kali一样下载后打开vmx文件即可，这是<a href="https://sourceforge.net/projects/metasploitable/files/">链接</a>默认用户名和密码均为msfadmin</li>
<li>windows server 2003：这个资源不太好找，放一个百度云的<a href="https://pan.baidu.com/share/init?surl=gfjvgaB">链接</a>,密码2l1d，选win2K3即可，剩下安装和装Ubuntu差不太多，不过这个版本比较特殊，把ip地址固定成了10.100开头的一个地址，进入适配器里将ipv4地址改为自动即可。</li>
<li>win7：不想多介绍这个，丢个能直接打开的vmx的<a href="http://pan.baidu.com/s/1o8BOeQA">链接</a>i，密码5mv7</li>
</ul>
<h2 id="共享文件夹">共享文件夹</h2>
<p>这个操作相对麻烦，先说windows的，两个系统的步骤统一，都是在虚拟机设置里将选项中的共享文件夹启用并添加本地文件夹，并勾选windows客户端中印射驱动器即可，如图<br>
<img src="https://dankin.github.io/post-images/1594741355604.png" alt="" loading="lazy"><br>
linux主要是kali和Ubuntu需要配置，除了勾选印设其他两个第一步和windows一样，第二步<strong>Ubuntu</strong>只要安装VmwareTool即可，见<a href="https://blog.csdn.net/leelitian3/article/details/104710096">教程链接</a>,而<strong>Kali</strong>相对麻烦一些，需要手动用apt安装VmwareTools并配置，见<a href="https://blog.csdn.net/jun2016425/article/details/102542082">链接</a></p>
<h2 id="快照与克隆">快照与克隆</h2>
<p>简单说快照就是创建了一个系统还原点，可以还原操作系统，和原系统不可分，而克隆就是复制了一个一样的镜像，操作懒得介绍了，用得到就查一下，哦快照最好建个初始的方便崩了还原。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020.7.14随笔]]></title>
        <id>https://dankin.github.io/post/2020713-sui-bi/</id>
        <link href="https://dankin.github.io/post/2020713-sui-bi/">
        </link>
        <updated>2020-07-13T09:11:05.000Z</updated>
        <content type="html"><![CDATA[<p>前天结束了第一次组会，联系好了老师，算是拉开了读研的序幕。<br>
后续要做的事情很多，帮师兄实现平台，学习CTF相关知识，巩固计算机网络基础，还有必学的PHP，每周还得搞定一篇论文，希望后面的日子越来越充实吧。<br>
这边上班很清闲，甚至可以说清闲的有点过分，大多数时间在自己学东西（就是有人盯着挺拘束），基本没啥消费赚钱的欲望都低了不少，但是整天坐着着实有些难受，计划混到月底回家，专心呆空调房里学一阵子然后等9.1的开学。<br>
好像没啥其他好说的，写学习笔记去了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CNN卷积神经网络]]></title>
        <id>https://dankin.github.io/post/cnn-juan-ji-ceng-xiu-gai/</id>
        <link href="https://dankin.github.io/post/cnn-juan-ji-ceng-xiu-gai/">
        </link>
        <updated>2020-07-07T23:30:33.000Z</updated>
        <content type="html"><![CDATA[<p>帮学长做一个卷积层的修改，历时一个月，折腾好多方案，最后完成了项目，虽然最后的成果没有尽如人意，但还是学到了不少东西，写篇文章记录一下。</p>
<h2 id="cnn简介">CNN简介</h2>
<p>这里的CNN并非美国的那个CNN电视台（Cable News Network），它全名为Convolutional Neural Network，即卷积神经网络，经常用于大型图像的处理。</p>
<h2 id="cnn的各层">CNN的各层</h2>
<p>通常的CNN网络包括以下各个部分，卷积层（Conv）线性整流层（Relu），池化层（Pooling)，全连接层（Full Connect），损失函数层（loss），下面以介绍图片识别流程的方式捋一下各个层的作用。</p>
<ul>
<li>
<h3 id="卷积层">卷积层</h3>
</li>
</ul>
<p>卷积层，使用<a href="https://www.zhihu.com/question/22298352">卷积</a>操作来提取图片的局部特征，主要参数包含图像输入，卷积核，步长，扫描方式。<br>
先说图像输入，每一张图片可以看成一个矩阵，举例来说，一张大小为28*28的彩色<a href="https://blog.csdn.net/silence2015/article/details/53789748">RGB</a>图片，它可以看成分别对应红绿蓝的三个矩阵的组合,最终多张图片转换为数组形式的话，比如20张28*28的彩色图片，就是一个[20, 28, 28, 3]的数组。<br>
再说卷积核，卷积核是卷积操作中的扫描权重。比如一个3*3的卷积核，包含九个权重值，每次扫描图片，就会根据不同权重提取特征值，而整个卷积神经网络的训练过程，就是用来更新这个权重的，具体的后面会讲。<br>
然后是步长，包含横向和纵向，即卷积核在图片上每扫描一次移动的步长，没太多好说的。<br>
最后是扫描方式，主要有两种，一种是SAME，一种是VALID。举个例子，一个3*3的卷积核，对一张28*28的图像进行卷积，结束后提取的特征图会小一圈，这就是默认的VALID的扫描方式。而对28*28的图片周围补一圈0变成30*30，然后进行padding后，特征图大小就和原图相同。<br>
好的大概介绍完了卷积层，下面是relu层。</p>
<ul>
<li>
<h3 id="线性整流层">线性整流层</h3>
</li>
</ul>
<p>线性整流层，又称relu层，通常意义下，线性整流函数指代数学中的斜坡函数，即<br>
<img src="https://dankin.github.io/post-images/1594187782871.png" alt="" loading="lazy"><br>
这是一个非线性激励函数，用于减少图像中各个值的相互依存关系，将负值转化为0，造成了网络的稀疏性同时可以解决过拟合问题。</p>
<ul>
<li>
<h3 id="池化层">池化层</h3>
</li>
</ul>
<p>池化层用于将大的图片进行<a href="https://zhuanlan.zhihu.com/p/87434515">下采样</a>，通常用的是2*2的扫描框，步长为2，方式主要分为最大池化和平均池化，最大池化是取框里4个值的最大值，平均池化取平均值，去除冗余信息，最后返回长宽缩小一倍的图片，减少了计算量和内存消耗</p>
<ul>
<li>
<h3 id="全连接层">全连接层</h3>
</li>
</ul>
<p>将图像转换为向量，比如20张14*14的图片，转换为1*100的向量，就是使用20*100个14*14的卷积核对其进行卷积，这样就分成了100个神经元，对应预测的100种可能。</p>
<ul>
<li>
<h3 id="loss层">loss层</h3>
</li>
</ul>
<p>用于计算损失度，具体没有搞透，但是功能上是用来计算的损失和准确率吧</p>
<h2 id="运行方式">运行方式</h2>
<p>一个CNN的实现流程包括正向传播和反向传播两部分，正向传播过程是图片通过卷积层，relu层，池化层，全连接层，loss层处理后得到一个loss值，反向传播是根据loss值反向推导各个层的偏差最后回到卷积层来调整卷积核的权重，反向传播实际上就是一个训练卷积核的过程。而正向传播也可以用已经训练好的卷积核来实现分类操作。</p>
<h2 id="项目记录">项目记录</h2>
<p>一开始修改思路是从padding的方式入手，same的padding方式中补0操作带来了一定精度损失，于是考虑使用对边缘单独训练的方式，将补的0替换为边缘。但代码实现太过困难，对边缘的操作无法方便的转换为矩阵乘法且loss值计算也遇到了障碍。于是通过取卷积核的权重的平均值的50倍，乘以图片边缘的值来替换原来的0，最终使用非经典网络完成了这一操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[a simple start]]></title>
        <id>https://dankin.github.io/post/hello/</id>
        <link href="https://dankin.github.io/post/hello/">
        </link>
        <updated>2020-07-07T07:33:56.000Z</updated>
        <content type="html"><![CDATA[<p>比起写博客，更想作为一个记录自己的地方吧，有趣的事，想说的话，顺带上一些学习笔记，成就打卡，比起社交软件上的树洞，这样一个大大方方而又无人问津的地方更合我的胃口。<br>
搭建这个blog用的是<a href="http://www.gridea.dev">Gridea</a>，图个方便，暂时偏向简洁风就先不安装什么插件了，用了自带的simple主题，比起花里胡哨，更重要的是写下的文字吧。</p>
]]></content>
    </entry>
</feed>